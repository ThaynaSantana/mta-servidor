screen = {guiGetScreenSize ()}
local resolution = {1920, 1080}
local x, y = screen[1] / resolution[1], screen[2] / resolution[2]

function aToR (X, Y, sX, sY)
    local Px = (Global and (Global.PosX or resolution[1]) or resolution[1])
    local Falta = resolution[1] - X
    local X = Px - Falta
    local xd = X/resolution[1] or X
    local yd = Y/resolution[2] or Y
    local xsd = sX/resolution[1] or sX
    local ysd = sY/resolution[2] or sY
    return xd*screen[1], yd*screen[2], xsd*screen[1], ysd*screen[2]
end

function isCursorOnElement (x, y, w, h)
    if (not isCursorShowing()) then
        return false
    end
    local mx, my = getCursorPosition()
    local fullx, fully = guiGetScreenSize()
    local cursorx, cursory = mx*fullx, my*fully
    if cursorx > x and cursorx < x + w and cursory > y and cursory < y + h then
        return true
    else
        return false
    end
end

function isEventHandlerAdded( sEventName, pElementAttachedTo, func )
    if type( sEventName ) == 'string' and isElement( pElementAttachedTo ) and type( func ) == 'function' then
        local aAttachedFunctions = getEventHandlers( sEventName, pElementAttachedTo )
        if type( aAttachedFunctions ) == 'table' and #aAttachedFunctions > 0 then
            for i, v in ipairs( aAttachedFunctions ) do
                if v == func then
                    return true
                end
            end
        end
    end
    return false
end

local fontsDB = {}

_dxCreateFont = dxCreateFont
function dxCreateFont (path, size, ...)
    if not fontsDB[path] then
        fontsDB[path] = { }
    end
    if fontsDB[path][size] then
        return fontsDB[path][size]
    end
    local _, size, _, _ = aToR(0, size, 0, 0)
    fontsDB[path][size] = _dxCreateFont (path, size, ...)
    return fontsDB[path][size]
end

_isCursorOnElement = isCursorOnElement
function isCursorOnElement (x, y, w, h)
    local x, y, w, h = aToR (x, y, w, h)
    return _isCursorOnElement (x, y, w, h)
end

_dxDrawRectangle = dxDrawRectangle
function dxDrawRectangle(x, y, w, h, ...)
    local x, y, w, h = aToR(x, y, w, h)
    return _dxDrawRectangle(x, y, w, h, ...)
end

_dxDrawText = dxDrawText
function dxDrawText (text, x, y, w, h, color, scale, font, alignX, alignY, clip, wbreak, post, colorcode, sPP, fR, fRCX, fRCY)
    local x, y, w, h = aToR (x, y, w, h)
    return _dxDrawText (text, x, y, (w + x), (h + y) , color, scale, font, alignX, alignY, clip, wbreak, post, colorcode, sPP, fR, fRCX, fRCY)
end

_dxDrawImageSection = dxDrawImageSection
function dxDrawImageSection(x, y, w, h, ...)
    local x, y, w, h = aToR(x, y, w, h)
    return _dxDrawImageSection(x, y, w, h, ...)
end

_dxDrawImage = dxDrawImage
function dxDrawImage(x, y, w, h, ...)
    local x, y, w, h = aToR(x, y, w, h)
    return _dxDrawImage(x, y, w, h, ...)
end

-- Svgs

svgsRectangle = {};
function dxDrawRoundedRectangle(x, y, w, h, radius, color, post)
    if not svgsRectangle[radius] then
        svgsRectangle[radius] = {}
    end
    if not svgsRectangle[radius][w] then
        svgsRectangle[radius][w] = {}
    end
    if not svgsRectangle[radius][w][h] then
        local path = string.format([[
        <svg width="%s" height="%s" viewBox="0 0 %s %s" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect opacity="1" width="%s" height="%s" rx="%s" fill="#FFFFFF"/>
        </svg>
        ]], w, h, w, h, w, h, radius)
        svgsRectangle[radius][w][h] = svgCreate(w, h, path)
    end
    if svgsRectangle[radius][w][h] then
        dxDrawImage(x, y, w, h, svgsRectangle[radius][w][h], 0, 0, 0, color, post or false)
    end
end

-------

svg = {}

function createVector (width, height, raw)
    local data = svgCreate (width, height, raw, function (element)
        if not element or not isElement (element) then
            return false
        end
        dxSetTextureEdge (element, 'clamp')
    end)
    return {
        element = data;
    }
end

function createSVG (identify, width, height, raw)
    if not svg[identify] then
        local data = createVector (width, height, raw)
        svg[identify] = data.element
    end
    return svg[identify]
end

function loadSVG ( )
    createSVG ('background_Card', 124, 156, [[
        <svg width="124" height="156" viewBox="0 0 124 156" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect x="1.5" y="1.5" width="121" height="153" rx="13.5" fill="#313131" stroke="url(#paint0_linear_0_1)" stroke-width="3"/>
        <rect y="129" width="124" height="27" rx="5" fill="url(#paint1_linear_0_1)"/>
        <defs>
            <linearGradient id="paint0_linear_0_1" x1="62" y1="1.18567e-08" x2="62" y2="190.5" gradientUnits="userSpaceOnUse">
                <stop stop-color="#4B7EFF"/>
                <stop offset="1" stop-opacity="0"/>
            </linearGradient>
            <linearGradient id="paint1_linear_0_1" x1="-2.05939e-08" y1="143" x2="124" y2="143" gradientUnits="userSpaceOnUse">
                <stop stop-color="#4672E3"/>
                <stop offset="1" stop-color="#313131"/>
            </linearGradient>
        </defs>
    </svg>
    ]])
    createSVG ('Icon_Clothes', 80, 80, [[
        <svg width="80" height="80" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M40 13.3333C36.9058 13.3333 33.9383 14.5625 31.7504 16.7504C29.5625 18.9384 28.3333 21.9058 28.3333 25H35C35 23.6739 35.5268 22.4022 36.4645 21.4645C37.4021 20.5268 38.6739 20 40 20C41.3261 20 42.5978 20.5268 43.5355 21.4645C44.4732 22.4022 45 23.6739 45 25C45 26.3261 44.4732 27.5979 43.5355 28.5355C42.5978 29.4732 41.3261 30 40 30C38.1667 30 36.6667 31.5 36.6667 33.3333V39.1667L7.99999 60.6667C7.4403 61.0864 7.02688 61.6717 6.81828 62.3394C6.60968 63.0072 6.61648 63.7237 6.83771 64.3874C7.05895 65.0511 7.4834 65.6284 8.05096 66.0375C8.61851 66.4466 9.30038 66.6667 9.99999 66.6667H70C70.6996 66.6667 71.3815 66.4466 71.949 66.0375C72.5166 65.6284 72.941 65.0511 73.1623 64.3874C73.3835 63.7237 73.3903 63.0072 73.1817 62.3394C72.9731 61.6717 72.5597 61.0864 72 60.6667L43.3333 39.1667V36.1667C45.7388 35.4495 47.8488 33.9757 49.3501 31.964C50.8513 29.9523 51.6637 27.5101 51.6667 25C51.6667 21.9058 50.4375 18.9384 48.2496 16.7504C46.0616 14.5625 43.0942 13.3333 40 13.3333ZM40 45L60 60H20L40 45Z" fill="#F8F8F8"/>
        </svg>
    ]])
    createSVG ('Icon_CarPolice', 80, 80, [[
        <svg width="80" height="80" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M62.0287 9.97875L56.4675 14.1488L58.7412 16.1675L62.0287 9.97875ZM23.955 14.1488L18.3937 9.97875L21.6812 16.1675L23.955 14.1488ZM49.6025 2.5L45.71 10.4037L48.5975 11.2825L49.6025 2.5ZM34.7125 10.4037L30.82 2.5L31.825 11.2825L34.7125 10.4037Z" fill="#F8F8F8"/>
            <path d="M14.24 71.5025C15.5344 71.5025 16.5837 70.4274 16.5837 69.1013C16.5837 67.7751 15.5344 66.7 14.24 66.7C12.9456 66.7 11.8962 67.7751 11.8962 69.1013C11.8962 70.4274 12.9456 71.5025 14.24 71.5025Z" fill="#F8F8F8"/>
            <path d="M65.7588 71.5025C67.0532 71.5025 68.1025 70.4274 68.1025 69.1013C68.1025 67.7751 67.0532 66.7 65.7588 66.7C64.4643 66.7 63.415 67.7751 63.415 69.1013C63.415 70.4274 64.4643 71.5025 65.7588 71.5025Z" fill="#F8F8F8"/>
            <path d="M75.9688 64.4963L75.6637 64.5163C75.9812 59.1463 76.1888 52.2113 75.205 51.4775C72.115 49.1763 69.88 46.6663 68.2275 44.1588C70.5988 44.1538 73.5375 43.9238 74.7475 42.9038C76.1938 41.685 77.2613 38.4975 75.9088 37.1788C74.2825 35.5988 68.8412 36.61 67.2862 37.965C66.7712 38.4125 66.3337 39.1863 65.975 40.03C62.8612 33.005 63.4163 26.9688 61.4288 26.9688C61.4288 26.9688 60.6225 26.8975 59.1337 26.7988V24.98H62.96V19.2563H17.0413V24.98H20.8687V26.7988C19.3787 26.8975 18.5713 26.9688 18.5713 26.9688C16.855 26.9688 17.1588 33.2588 14.0925 40.195C13.7213 39.2863 13.2637 38.4425 12.715 37.965C11.1612 36.61 5.71375 35.5988 4.09125 37.1788C2.73875 38.4975 3.8075 41.685 5.255 42.9038C6.495 43.9488 9.5525 44.1663 11.9512 44.16C10.0743 47.0488 7.64222 49.5361 4.79625 51.4775C3.81 52.1538 4.02 59.1238 4.3375 64.5163L4.03 64.4963C3.185 64.4963 2.5 64.9563 2.5 65.5213V71.6738C2.5 72.24 3.185 72.6988 4.03 72.6988C4.03 72.6988 5.21875 72.7775 7.3525 72.8875V75.7838C7.3525 76.7325 8.0375 77.5 8.88375 77.5H19.5963C20.4438 77.5 21.1287 76.7325 21.1287 75.785V73.4338L22.715 73.4775V74.025C22.715 75.3188 23.7638 76.3688 25.0588 76.3688H25.3513C26.25 76.3688 27.0212 75.8575 27.4137 75.115H52.585C52.7819 75.4921 53.0781 75.8083 53.4416 76.0292C53.8051 76.2502 54.2221 76.3676 54.6475 76.3688H54.94C56.2337 76.3688 57.2837 75.3188 57.2837 74.025V73.4775L58.8688 73.435V75.785C58.8688 76.7325 59.555 77.5 60.4 77.5H71.115C71.9612 77.5 72.6463 76.7325 72.6463 75.785V72.89C74.7888 72.7775 75.9688 72.7 75.9688 72.7C76.8163 72.7 77.5 72.2413 77.5 71.675V65.5225C77.5 64.9563 76.8163 64.4963 75.9688 64.4963ZM69.5713 53.9825L71.455 53.7838C72.3025 53.7838 72.9875 54.4513 72.9875 55.275V59.7475C72.9875 60.5713 72.3025 61.2388 71.455 61.2388L69.5713 61.4375V53.9825ZM68.305 54.115V61.5713L60.5062 62.3925C59.66 62.3925 58.975 61.7263 58.975 60.9038V56.43C58.975 55.6075 59.66 54.94 60.5062 54.94L68.305 54.115ZM60.42 53.47L56.0887 51.9638C59.0312 46.5725 65.41 42.985 65.41 42.985C60.945 49.7425 60.42 53.47 60.42 53.47ZM25.3513 60.6963H25.0588C24.535 60.6963 24.055 60.875 23.665 61.165V58.2575C23.665 57.3413 24.3 56.5975 25.085 56.5975H54.915C55.6987 56.5975 56.3338 57.3413 56.3338 58.2575V61.1638C55.9328 60.8615 55.4446 60.6974 54.9425 60.6963H54.65C53.3563 60.6963 52.3063 61.7463 52.3063 63.04V64.4025C51.7813 64.8075 51.355 65.3288 51.0763 65.9388H28.9287C28.6485 65.3343 28.2256 64.8071 27.6962 64.4025V63.0413C27.6959 62.4194 27.4487 61.8232 27.009 61.3835C26.5693 60.9438 25.9731 60.6966 25.3513 60.6963ZM48.9012 20.505H61.7088V23.7288H48.9012V20.505ZM18.2913 23.7288V20.505H31.0963V23.7288H18.2913ZM20.8675 29.7925C20.8675 29.7925 29.0937 29.265 40 29.265C50.905 29.265 59.1337 29.7925 59.1337 29.7925L62.1925 41.72C62.1925 41.72 51.6712 41.1938 40 41.1938C28.33 41.1938 17.805 41.72 17.805 41.72L20.8675 29.7925ZM23.91 51.9638L19.5788 53.47C19.5788 53.47 19.0525 49.7425 14.5875 42.985C14.5875 42.9863 20.9663 46.5738 23.91 51.9638ZM11.6963 54.115L19.4913 54.9375C20.3388 54.9375 21.0238 55.6038 21.0238 56.4263V60.9013C21.0238 61.725 20.3388 62.3913 19.4913 62.3913L11.6963 61.5688V54.115ZM7.01125 55.2738C7.01125 54.45 7.695 53.7838 8.5425 53.7838L10.43 53.9825V61.4363L8.5425 61.2375C7.695 61.2375 7.01125 60.5713 7.01125 59.7488V55.2738ZM22.715 72.2263C11.5113 71.9325 4.21625 71.4588 4.11125 71.4513L4.07125 71.4488H4.03C3.9351 71.4495 3.84065 71.4356 3.75 71.4075V65.7875C3.82972 65.7622 3.91263 65.7483 3.99625 65.7463C4.63625 65.7875 11.2538 66.2025 21.2888 66.4875C21.1718 66.8612 21.1094 67.2498 21.1037 67.6413C21.1037 68.9638 21.7425 70.1288 22.715 70.8788V72.2263ZM25.205 70.48C24.8115 70.494 24.4192 70.4286 24.0515 70.2876C23.6839 70.1467 23.3484 69.9331 23.065 69.6596C22.7817 69.3861 22.5564 69.0584 22.4026 68.6959C22.2487 68.3335 22.1695 67.9437 22.1695 67.55C22.1696 67.1562 22.2491 66.7665 22.4031 66.4041C22.5571 66.0417 22.7825 65.7141 23.0659 65.4407C23.3494 65.1674 23.685 64.9539 24.0527 64.8131C24.4204 64.6724 24.8127 64.6071 25.2063 64.6213C25.965 64.6486 26.6836 64.9692 27.2107 65.5157C27.7378 66.0623 28.0322 66.792 28.0321 67.5512C28.0319 68.3105 27.7371 69.0401 27.2098 69.5864C26.6825 70.1327 25.9638 70.453 25.205 70.48ZM30.625 72.3875C29.6288 72.3725 28.6525 72.3575 27.695 72.3388V70.8788C28.1945 70.4991 28.5997 70.0094 28.8792 69.4477C29.1586 68.886 29.3048 68.2674 29.3062 67.64C29.3062 67.3013 29.255 66.9788 29.1762 66.6638C29.9512 66.6775 30.6238 66.6988 30.6238 66.6988L30.625 72.3875ZM52.305 72.3388C51.3488 72.3575 50.3725 72.3725 49.375 72.3875V66.6988C49.375 66.6988 50.0488 66.6763 50.8238 66.6638C50.741 66.9827 50.6974 67.3105 50.6938 67.64C50.6938 68.9638 51.3325 70.1275 52.305 70.8775V72.3388ZM54.795 70.57C54.4015 70.584 54.0092 70.5186 53.6415 70.3776C53.2739 70.2367 52.9384 70.0231 52.655 69.7496C52.3717 69.4762 52.1464 69.1484 51.9926 68.7859C51.8387 68.4235 51.7595 68.0337 51.7595 67.64C51.7596 67.2462 51.839 66.8565 51.9931 66.4941C52.1471 66.1317 52.3725 65.8041 52.6559 65.5307C52.9394 65.2574 53.275 65.0439 53.6427 64.9032C54.0104 64.7624 54.4027 64.6971 54.7963 64.7113C55.555 64.7386 56.2736 65.0592 56.8007 65.6058C57.3278 66.1523 57.6222 66.882 57.6221 67.6412C57.6219 68.4005 57.3271 69.1301 56.7998 69.6764C56.2725 70.2227 55.5538 70.543 54.795 70.57ZM76.25 71.4075C76.1591 71.4363 76.0641 71.4502 75.9688 71.4488H75.9275L75.8862 71.4513C75.7825 71.4588 68.4887 71.9325 57.285 72.2263V70.88C57.7845 70.5001 58.1896 70.0101 58.4691 69.4482C58.7485 68.8863 58.8947 68.2676 58.8963 67.64C58.8963 67.2375 58.82 66.855 58.7138 66.4863C68.7463 66.2013 75.3625 65.7863 76.0025 65.745C76.1062 65.7488 76.19 65.7675 76.25 65.7863V71.4075Z" fill="#F8F8F8"/>
            <path d="M29.0138 58.3112H50.9863V59.2263H29.0138V58.3112ZM29.0138 60.8088H50.9863V61.7225H29.0138V60.8088ZM29.0138 63.3063H50.9863V64.2212H29.0138V63.3063Z" fill="#F8F8F8"/>
            <path d="M16.6338 61.5675C18.4321 61.5675 19.89 60.1096 19.89 58.3112C19.89 56.5129 18.4321 55.055 16.6338 55.055C14.8354 55.055 13.3775 56.5129 13.3775 58.3112C13.3775 60.1096 14.8354 61.5675 16.6338 61.5675Z" fill="#F8F8F8"/>
            <path d="M63.3637 61.5675C65.1621 61.5675 66.62 60.1096 66.62 58.3112C66.62 56.5129 65.1621 55.055 63.3637 55.055C61.5654 55.055 60.1075 56.5129 60.1075 58.3112C60.1075 60.1096 61.5654 61.5675 63.3637 61.5675Z" fill="#F8F8F8"/>
        </svg>
    ]])
    createSVG ('Icon_Gun', 80, 80, [[
        <svg width="80" height="80" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M23.3333 16.6667H76.6666V30H73.3333V33.3333H53.3333C52.4493 33.3333 51.6014 33.6845 50.9763 34.3097C50.3512 34.9348 50 35.7826 50 36.6667V40C50 41.7681 49.2976 43.4638 48.0474 44.7141C46.7971 45.9643 45.1014 46.6667 43.3333 46.6667H32.0666C30.8 46.6667 29.6333 47.4 29.0667 48.5333L20.9 64.8333C20.3333 65.9667 19.2 66.6667 17.9333 66.6667H6.66665C6.66665 66.6667 -3.33335 66.6667 9.99998 46.6667C9.99998 46.6667 20 33.3333 6.66665 33.3333V16.6667H9.99998L11.6666 13.3333H21.6666L23.3333 16.6667ZM46.6666 40V36.6667C46.6666 35.7826 46.3155 34.9348 45.6903 34.3097C45.0652 33.6845 44.2174 33.3333 43.3333 33.3333H40C40 33.3333 36.6666 36.6667 40 40C38.2319 40 36.5362 39.2976 35.2859 38.0474C34.0357 36.7971 33.3333 35.1015 33.3333 33.3333C32.4493 33.3333 31.6014 33.6845 30.9763 34.3097C30.3512 34.9348 30 35.7826 30 36.6667V40C30 40.8841 30.3512 41.7319 30.9763 42.357C31.6014 42.9822 32.4493 43.3333 33.3333 43.3333H43.3333C44.2174 43.3333 45.0652 42.9822 45.6903 42.357C46.3155 41.7319 46.6666 40.8841 46.6666 40Z" fill="#F8F8F8"/>
        </svg>
    ]])
    createSVG ('Icon_Select', 35, 35, [[
        <svg width="35" height="35" viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M17.5 29.1667C11.0687 29.1667 5.83329 23.9312 5.83329 17.5C5.83329 11.0687 11.0687 5.83332 17.5 5.83332C23.9312 5.83332 29.1666 11.0687 29.1666 17.5C29.1666 23.9312 23.9312 29.1667 17.5 29.1667ZM17.5 2.91666C15.5848 2.91666 13.6885 3.29387 11.9192 4.02675C10.1498 4.75963 8.54217 5.83383 7.18799 7.18802C4.45308 9.92292 2.91663 13.6322 2.91663 17.5C2.91663 21.3677 4.45308 25.0771 7.18799 27.812C8.54217 29.1661 10.1498 30.2404 11.9192 30.9732C13.6885 31.7061 15.5848 32.0833 17.5 32.0833C21.3677 32.0833 25.077 30.5469 27.8119 27.812C30.5468 25.0771 32.0833 21.3677 32.0833 17.5C32.0833 15.5849 31.7061 13.6885 30.9732 11.9192C30.2403 10.1499 29.1661 8.5422 27.8119 7.18802C26.4577 5.83383 24.8501 4.75963 23.0808 4.02675C21.3114 3.29387 19.4151 2.91666 17.5 2.91666ZM18.9583 10.2083H16.0416V16.0417H10.2083V18.9583H16.0416V24.7917H18.9583V18.9583H24.7916V16.0417H18.9583V10.2083Z" fill="#F8F8F8"/>
        </svg>
    ]])
    createSVG('Icon_Close', 15, 15, [[
        <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M0.365615 0.381611C0.599789 0.147272 0.917355 0.0156273 1.24848 0.0156273C1.5796 0.0156273 1.89716 0.147272 2.13134 0.381611L7.49219 5.74786L12.853 0.381611C12.9682 0.262223 13.106 0.166995 13.2584 0.101484C13.4107 0.0359723 13.5746 0.00148947 13.7404 4.71963e-05C13.9062 -0.00139507 14.0706 0.0302318 14.2241 0.0930829C14.3776 0.155934 14.517 0.24875 14.6343 0.366116C14.7515 0.483482 14.8442 0.623047 14.907 0.776668C14.9698 0.930288 15.0014 1.09489 15 1.26086C14.9985 1.42684 14.9641 1.59086 14.8986 1.74337C14.8332 1.89587 14.738 2.0338 14.6188 2.14911L9.25792 7.51536L14.6188 12.8816C14.8462 13.1174 14.9721 13.4331 14.9693 13.7609C14.9664 14.0886 14.8351 14.4021 14.6036 14.6339C14.372 14.8656 14.0588 14.9971 13.7314 15C13.404 15.0028 13.0886 14.8768 12.853 14.6491L7.49219 9.28286L2.13134 14.6491C1.89582 14.8768 1.58039 15.0028 1.25297 15C0.925554 14.9971 0.612354 14.8656 0.380827 14.6339C0.149299 14.4021 0.0179701 14.0886 0.015125 13.7609C0.0122798 13.4331 0.138147 13.1174 0.365615 12.8816L5.72647 7.51536L0.365615 2.14911C0.131512 1.9147 0 1.59682 0 1.26536C0 0.933905 0.131512 0.61602 0.365615 0.381611Z" fill="#F8F8F8"/>
        </svg>  
    ]])
    
end

function destroySVG ()
    if not next (svg) then
        return false
    end
    for i, v in pairs (svg) do
        if v and isElement (v) then
            destroyElement (v)
        end
    end
    svg = { }
    return true
end